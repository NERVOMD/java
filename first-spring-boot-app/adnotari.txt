=Adnotari

Acest text reprezinta in mare masura traducerea documentatiei oficiale de la adresa 
https://docs.oracle.com/javase/tutorial/java/annotations/index.html

“Eu stiu ca nu stiu nimic”, Socrate

Adnotarile reprezinta o forma de metadate. Ele sunt utilizate pentru a furniza date despre program dar nu sunt parte a programului propriu-zis. 

Pare a fi o defnitie/ecplicatie recursiva sau foarte vaga. Nu e nimic, in continuare venim cu exemple si explicatii.

== Forma unei adnotari

O adnotare simpla are forma:

[source, java]
@Entity

Simbolul “A rond” (in engleza “At sign”) indica compilatorul ca ceea ce urmeaza e o adnotare. In urmatorul exemplu, numele adnotarii e `Override`:

[source, java]
@Override
void mySuperMethod() { ... }

Adnotarile pot contine elemente, aceste elemente sunt nominalizate pot primi diferite valori:
[source, java] 
@Author(
   name = "Benjamin Franklin",
   date = "3/27/2003"
)
class MyClass() { ... }

sau
[source, java]
@SuppressWarnings(value = "unchecked")
void myMethod() { ... }

In caz exista un singur element si numele acestuia e `value`, atunci numele lui poate fi omis:
[source, java]
@SuppressWarnings("unchecked")
void myMethod() { ... }

Daca adnotarea nu are alemente, atunci parantezele pot fi omis, astfel cume exemplifact mai sus pentru `@Override`.

E posibil sa folosim mai multe adnotari pentru aceeasi declaratie:
[source, java]
@Author(name = "Jane Doe")
@EBook
class MyClass { ... }

Daca adnotarile au acelasi tip atunci spunem ca avem adnotari care se repeta “repeating annotations”:
@Author(name = "Jane Doe")
@Author(name = "John Smith")
class MyClass { ... }

Adnotarile care se repeta sunt “suportate” incepand cu Java SE 8.

Tipul adnotarii poate unul din tipurile definite in pachetele java.lang sau java.lang.annotation din Java SE API. In exemplele de mau sus Override si SuppressWarnings sunt adnotari predefnite din Java. E posibil sa defnim propriile tipuri de adnotari. Adnotarile Author and Ebook din exemplele precedenta sunt custom.

== Unde putem folosi adnotarile

Adnotarile pot fi aplicate declaratiilor: declarari de clase, de campuri, de metode si de alte elemente de program. Cand sunt utilizate pe declaratii conventia e sa punem fiecare adnotare pe linie proprie.

Incepand cu Java SE adnotarile pot fi aplicate la utilizarea tipurilor. De exemplu:

# Expresia ce creeaza o instanta a unei clase::
[source, java]
new @Interned MyObject();

# Conversie de tip (eng Type cast):
[source, java]
myString = (@NonNull String) str;

# clauza `implements`
[source, java]

    class UnmodifiableList<T> implements
        @Readonly List<@Readonly T> { ... }
# declararea exceptiilor aruncate
[source, java]

    void monitorTemperature() throws
        @Critical TemperatureException { ... }

Acest fel de adnotari se numesc adnotari de tip


==Adnotări predefinite

===Tipuri de adnotări folosite de limbajul Java

@Deprecated această adnotare indică că elementul marcat este “depășit” și nu mai este recomandaț de a fi utilizat. Compilatorul generează unwarning atunci când este folosita o metodă, clasă sau câmp ce are adnotarea @Deprecated. Când un element este “depășit” ar trebui să fie și documentat cu tag-ul javadoc @deprecated așa cum e aratat în urmatorul exemplu. 

[source, java]
  // Javadoc comment follows
    /**
     * @deprecated
     * explanation of why it was deprecated
     */
    @Deprecated
    static void deprecatedMethod() { }
}

@Override informeaza compilatorul ca elementul are drept scop să suprascrie un alt element din clasa părinte.

[source, java
// mark method as a superclass method
   // that has been overridden
   @Override 
   int overriddenMethod() { }
]

Cu toate că această adnotare nu este obligatorie atunci când suprascrie, ea ne ajută să prevenim erorile. Deoarece dacă o metoda marcată cu @override eșuaiaza să suprascrie corect metodă din clasa părinte, compilatorul va genera un mesaj de eroare.

@SuppressWarnings spune compilatotului sa suprime warnig-uri specifice pe care fără acesst adnotare le-ar fi egnerat. In exemplul urmator e folosită o metoda “depășită” si compilatorul in mod obișnuit ar fi egenrat mesajr, dar in acest ca adnotarea face ca mesajul să fie suprimat:

[source, java]
// use a deprecated method and tell 
   // compiler not to generate a warning
   @SuppressWarnings("deprecation")
    void useDeprecatedMethod() {
        // deprecation warning
        // - suppressed
        objectOne.deprecatedMethod();
    }
 Orice warning face parte dintr-o anumita categorie. Specifcatiile Limbajului Java contine doua categorii: deprecation si uncecked. Warning-ul uncecked poate aparea atuncicnd interfacing cu cod vechi inainte de advencing of generics. Pentru a suprima mai multe categorii de warnig-uri folositi sintaxa:

[source, java]
 @SuppressWarnings({"unchecked", "deprecation"})

https://docs.oracle.com/javase/8/docs/api/java/lang/SafeVarargs.html[@SafeVarargs] daca este aplicata la o metoda sau un constructor aserteaza ca nu vor fi efectuate operatii unsafe cu parametrul sau de tip varagrs. 

https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html[@FunctionalInterface] a aparut in Java SE 8 denota ca declrarea curenta are intentia de a fi inrefata functionala asa cum e definit in Specificatiile Limbajului Java.  

== Adnotari la tipuri
Ianinte de Java SE  8 adnotarile puteau fi aplicate doar pe declaratii. Incepand cu Java SE 8 adnotarile pot fi aplaicate la orice utilizare a tipului. Adica adnotarile pot fi folosite orisiunde unde este folosit un tip. Cateva exemple unde snt utilizate tipurile de data: expresia de creare a obiectelor (`new`), conversiile de tip (`cast`), clauza `implements`, clauza `throw`. This form of annotation is called a type annotation and several examples are provided in Annotations Basics.

Adnotarile de tip au fost create pentru a 


Asadar putem face concluzia din cele de mai sus ca putem clasifica adnotarile in:

Cateva utilizari ale adnotarilor:
informatie pentru compilator
procesare compile-time si deployment-time
procesare runtime





https://wpollock.com/AJava/Annotations.htm
https://profs.info.uaic.ro/~acf/java/slides/ro/annotation_slide.pdf
http://techalpine.com/how-to-write-java-annotations/?lang=ro
https://docs.oracle.com/javase/tutorial/java/annotations/basics.html
https://ro.qwe.wiki/wiki/Java_annotation
http://elf.cs.pub.ro/poo/laboratoare/reflection#adnotari-annotations

  

